# -*- coding: utf-8 -*-
"""
Network Assets Collector â€” Pro Edition (single-sheet Excel)

- Collectors: WMI (Windows), SSH (Linux/ESXi), SNMP v2c/v3 (+ LLDP/VLAN/Ports), HTTP fingerprint
- Active Directory fetch + merge (thread-safe)
- Optional Nmap-assisted discovery
- Excel: ONE sheet only named 'Assets' with FIXED columns (no other tabs)
- No duplicates (identity: UUID > Serial > MAC > IP)
- Local JSON Vault for credentials (no keyring)
"""

import ipaddress
import os
import socket
import subprocess
import sys
import threading
import json
import re
import ssl
import base64
from datetime import datetime, date, time, timezone as _tz

# hard-disable native keyring backend
import os as _os
_os.environ.setdefault('PYTHON_KEYRING_BACKEND', 'keyring.backends.null.Keyring')

import urllib3
from concurrent.futures import ThreadPoolExecutor, as_completed
import logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# ---------- Optional Windows WMI ----------
try:
    import pythoncom, wmi
except Exception:
    pythoncom = None
    wmi = None

import requests
from urllib3.exceptions import InsecureRequestWarning
urllib3.disable_warnings(InsecureRequestWarning)

import paramiko

# ---------- SNMP backends ----------
_PYSNMP_OK = False
_SNMP_BACKEND = "none"

# Define fallback types for when SNMP is not available
CommunityData = None
UsmUserData = None
SnmpEngine = None
UdpTransportTarget = None
ContextData = None
ObjectType = None
ObjectIdentity = None
getCmd = None
nextCmd = None
usmHMACSHAAuthProtocol = None
usmHMACMD5AuthProtocol = None
usmAesCfb128Protocol = None
usmDESPrivProtocol = None

try:
    from pysnmp_lextudio.hlapi import (
        CommunityData, UsmUserData, SnmpEngine, UdpTransportTarget, ContextData,
        ObjectType, ObjectIdentity, getCmd, nextCmd,
        usmHMACSHAAuthProtocol, usmHMACMD5AuthProtocol,
        usmAesCfb128Protocol, usmDESPrivProtocol
    )
    _PYSNMP_OK = True
    _SNMP_BACKEND = "pysnmp_lextudio"
except Exception:
    try:
        from pysnmp.hlapi import (
            CommunityData, UsmUserData, SnmpEngine, UdpTransportTarget, ContextData,
            ObjectType, ObjectIdentity, getCmd, nextCmd,
            usmHMACSHAAuthProtocol, usmHMACMD5AuthProtocol,
            usmAesCfb128Protocol, usmDESPrivProtocol
        )
        _PYSNMP_OK = True
        _SNMP_BACKEND = "pysnmp"
    except Exception:
        _PYSNMP_OK = False
        _SNMP_BACKEND = "none"

from ldap3 import Server, Connection, ALL, Tls

# =================== CONFIG / VAULT ===================
APP_NAME = "NetworkAssetsCollector"

def config_dir():
    base = os.path.join(os.path.expanduser("~"), "AppData", "Roaming") if os.name=="nt" else os.path.expanduser("~/.config")
    path = os.path.join(base, APP_NAME)
    os.makedirs(path, exist_ok=True)
    return path

def _vault_dir():
    d = os.path.join(config_dir(), "vault")
    os.makedirs(d, exist_ok=True)
    return d

def _vault_path():
    return os.path.join(_vault_dir(), "creds.vault.json")

def _vault_load():
    try:
        with open(_vault_path(), "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def _vault_save(d):
    try:
        with open(_vault_path(), "w", encoding="utf-8") as f:
            json.dump(d, f, indent=2)
    except Exception:
        pass

def _vault_put(secret_id: str, value: str):
    data = _vault_load()
    data[secret_id] = base64.b64encode((value or "").encode("utf-8")).decode("ascii")
    _vault_save(data)

def _vault_get(secret_id: str) -> str:
    data = _vault_load()
    v = data.get(secret_id, "")
    try:
        return base64.b64decode(v.encode("ascii")).decode("utf-8") if v else ""
    except Exception:
        return ""

CONFIG_PATH = os.path.join(config_dir(), "config.json")

def load_config():
    if os.path.exists(CONFIG_PATH):
        try:
            with open(CONFIG_PATH, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            pass
    return {
        "windows_creds": [],  # [{username, secret_id}]
        "linux_creds": [],    # [{username, secret_id}]
        "snmp_v2c": ["public"],
        "snmp_v3": {
            "user":"", "auth_key":"", "priv_key":"",
            "auth_proto":"SHA", "priv_proto":"AES128"
        },
        "ad": {"server":"", "base_dn":"", "username":"", "secret_id":"", "use_ssl": False}
    }

def save_config(cfg):
    with open(CONFIG_PATH, "w", encoding="utf-8") as f:
        json.dump(cfg, f, indent=2)

def set_secret(secret_id: str, password: str):
    try:
        if not secret_id: return
        _vault_put(secret_id, password or "")
    except Exception:
        pass

def get_secret(secret_id: str) -> str:
    try:
        if not secret_id: return ""
        return _vault_get(secret_id) or ""
    except Exception:
        return ""

def new_secret_id(prefix: str, existing_ids: set) -> str:
    i = 0
    while True:
        sid = f"{prefix}:{i}"
        if sid not in existing_ids:
            return sid
        i += 1

# =================== UI ===================
from PyQt6.QtCore import Qt, QThread, pyqtSignal
from PyQt6.QtGui import QFont, QIcon, QPixmap
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel, QLineEdit, QPushButton,
    QTextEdit, QProgressBar, QFileDialog, QHBoxLayout, QGroupBox, QMessageBox, QCheckBox
)

# -------- Excel --------
from openpyxl import Workbook, load_workbook
from openpyxl.styles import Font, Alignment, PatternFill

# =================== Helpers ===================
def _safe_log(log_sink, msg: str):
    try:
        if hasattr(log_sink, "emit"):
            log_sink.emit(msg); return
    except Exception:
        pass
    try:
        log_sink(msg)
    except Exception:
        print(msg)

def _clear_layout(layout):
    try:
        while layout.count():
            item = layout.takeAt(0)
            w = item.widget()
            if w is not None:
                w.deleteLater()
            child = item.layout()
            if child is not None:
                _clear_layout(child)
    except Exception:
        pass

def which(cmd: str) -> str | None:
    paths = os.environ.get("PATH", "").split(os.pathsep)
    exts = [""] if os.name != "nt" else ["", ".exe", ".bat", ".cmd"]
    for p in paths:
        for e in exts:
            full = os.path.join(p, cmd + e)
            if os.path.isfile(full):
                return full
    return None

NMAP_BIN = which("nmap")

def excel_sanitize(v):
    try:
        if isinstance(v, datetime):
            if v.tzinfo is not None:
                v = v.astimezone().replace(tzinfo=None)
            return v.strftime("%Y-%m-%d %H:%M:%S")
        if isinstance(v, (date, time)):
            return v.isoformat()
        return v
    except Exception:
        try: return str(v)
        except Exception: return ""

# =================== Networking ===================
def is_alive(ip_address: str, count: int = 2, timeout_ms: int = 1000) -> bool:
    try:
        if os.name == 'nt':
            cmd = ["ping", "-n", str(count), "-w", str(timeout_ms), ip_address]
        else:
            timeout_s = max(1, int(round(timeout_ms / 1000)))
            cmd = ["ping", "-c", str(count), "-W", str(timeout_s), ip_address]
        res = subprocess.run(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        return res.returncode == 0
    except Exception:
        return False

def is_tcp_open(ip: str, port: int, timeout: float = 0.8) -> bool:
    try:
        with socket.create_connection((ip, port), timeout=timeout):
            return True
    except Exception:
        return False

def normalize_mac(mac: str | None) -> str | None:
    if not mac: return None
    m = mac.replace("-", ":").replace(".", ":").upper()
    m = ":".join([seg.zfill(2) for seg in m.replace(" ", "").split(":") if seg != ""])
    return m

def safe_first(sequence, default=None):
    try:
        return sequence[0] if sequence else default
    except Exception:
        return default

# =================== SSH ===================
def ssh_connect(ip, username, password=None, pkey=None, port=22, timeout=6):
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        if pkey and isinstance(pkey, str) and os.path.exists(pkey):
            key = paramiko.RSAKey.from_private_key_file(pkey)
            client.connect(ip, port=port, username=username, pkey=key,
                           timeout=timeout, banner_timeout=timeout, auth_timeout=timeout)
        else:
            client.connect(ip, port=port, username=username, password=password,
                           timeout=timeout, banner_timeout=timeout, auth_timeout=timeout)
        return client
    except Exception as e:
        try: client.close()
        except Exception: pass
        raise e

def _ssh_run(client: paramiko.SSHClient, cmd: str, timeout=6) -> str:
    try:
        stdin, stdout, stderr = client.exec_command(cmd, timeout=timeout)
        out = stdout.read().decode(errors="ignore").strip()
        if not out:
            err = stderr.read().decode(errors="ignore").strip()
            return err
        return out
    except Exception:
        return ""

# =================== Identity & Confidence ===================
def valid_serial(s):
    if not s: return False
    s = s.strip()
    return s and s.upper() not in ("N/A", "UNKNOWN", "TO BE FILLED BY O.E.M.", "DEFAULT STRING")

def pick_identity_from_data(data: dict):
    uuid = (data.get("Asset UUID") or "").strip() or None
    if uuid and uuid.upper() != "N/A":
        return ("uuid", uuid)
    sn = (data.get("Serial Number") or "").strip() or None
    if sn and sn.upper() != "N/A":
        return ("serial", sn)
    mac = normalize_mac(data.get("MAC Address"))
    if mac and mac.upper() != "NO MAC ADDRESS FOUND":
        return ("mac", mac)
    return (None, None)

# =================== WMI (Windows) ===================
EXCLUDE_NIC_KEYWORDS = (
    "Bluetooth","VirtualBox","VMware","Hyper-V","Wi-Fi Direct","TAP","Loopback",
    "RAS","Pseudo","NPCAP","Centrino","ANYCONNECT"
)

def get_primary_mac_wmi(wmi_conn) -> str | None:
    try:
        nics = wmi_conn.Win32_NetworkAdapterConfiguration(IPEnabled=True) or []
        candidates = []
        for nic in nics:
            desc = (getattr(nic, "Description", "") or "") + " " + (getattr(nic, "Caption", "") or "")
            if any(x.lower() in desc.lower() for x in EXCLUDE_NIC_KEYWORDS):
                continue
            mac = getattr(nic, "MACAddress", None)
            if mac:
                candidates.append(mac)
        mac = candidates[0] if candidates else None
        return normalize_mac(mac)
    except Exception:
        return None

def collect_windows_wmi(ip_address: str, username: str, password: str) -> dict:
    if wmi is None or pythoncom is None:
        return {"Error": "WMI not available on this platform"}
    try:
        # Initialize COM for WMI
        try:
            if pythoncom and hasattr(pythoncom, 'CoInitialize'):
                pythoncom.CoInitialize()
        except (AttributeError, Exception):
            pass  # CoInitialize not available or already called
        c = wmi.WMI(computer=ip_address, user=username, password=password)
        system_info = safe_first(c.Win32_ComputerSystem())
        os_info = safe_first(c.Win32_OperatingSystem())
        bios_info = safe_first(c.Win32_BIOS())
        baseboard = safe_first(c.Win32_BaseBoard())
        sysprod = safe_first(c.Win32_ComputerSystemProduct())

        # CPU
        cpu_list = c.Win32_Processor() or []
        cpu_names, sockets, total_cores, total_threads = [], 0, 0, 0
        for cpu in cpu_list:
            name = (getattr(cpu, "Name", "") or "").strip()
            if name and name not in cpu_names: cpu_names.append(name)
            sockets += 1
            try: total_cores += int(getattr(cpu, "NumberOfCores", 0) or 0)
            except Exception: pass
            try: total_threads += int(getattr(cpu, "NumberOfLogicalProcessors", 0) or 0)
            except Exception: pass
        cpu_model = cpu_names[0] if cpu_names else "N/A"
        cpu_summary = f"{cpu_model} ({sockets} socket(s), {total_cores} cores, {total_threads} threads)" if sockets else "N/A"

        # RAM
        try:
            dimms = c.Win32_PhysicalMemory() or []
            dimm_total = 0
            for d in dimms:
                cap = getattr(d, "Capacity", None)
                if cap: dimm_total += int(cap)
            total_ram_gb = round(dimm_total / (1024**3), 2) if dimm_total else None
        except Exception:
            total_ram_gb = None
        if total_ram_gb is None and system_info and getattr(system_info, "TotalPhysicalMemory", None):
            total_ram_gb = round(int(system_info.TotalPhysicalMemory) / (1024**3), 2)
        if total_ram_gb is None: total_ram_gb = "N/A"

        # Disks
        disks = c.Win32_DiskDrive() or []
        seen_ids, disk_rows = set(), []
        for d in disks:
            try:
                pid = getattr(d, "PNPDeviceID", None) or getattr(d, "DeviceID", None)
                if pid and pid in seen_ids: continue
                if pid: seen_ids.add(pid)
                sz = getattr(d, "Size", None)
                if not sz: continue
                gb = round(int(sz) / (1024**3), 2)
                idx = getattr(d, "Index", None)
                disk_rows.append((idx if idx is not None else 9999, gb))
            except Exception:
                continue
        disk_rows.sort(key=lambda x: x[0])
        disk_info = [f"Disk {i+1} = {gb}GB" for i, (_, gb) in enumerate(disk_rows)]

        # MACs / GPU / Monitors
        primary_mac = get_primary_mac_wmi(c)
        mac_addresses_full = []
        try:
            for nic in (c.Win32_NetworkAdapterConfiguration(IPEnabled=True) or []):
                desc = ((getattr(nic, "Description", "") or "") + " " + (getattr(nic, "Caption", "") or ""))
                if any(x.lower() in desc.lower() for x in EXCLUDE_NIC_KEYWORDS):
                    continue
                mac = normalize_mac(getattr(nic, "MACAddress", None))
                if mac: mac_addresses_full.append(mac)
        except Exception: pass

        monitors = c.Win32_DesktopMonitor() or []
        monitor_name = "No Monitor Found"
        if monitors:
            try:
                first_monitor = safe_first(monitors)
                if first_monitor and hasattr(first_monitor, 'Name'):
                    monitor_name = first_monitor.Name
            except Exception:
                pass
        connected_screens = str(len(monitors)) if monitors else "0"

        gpus = []
        try:
            for g in (c.Win32_VideoController() or []):
                nm = getattr(g, "Name", None)
                if nm and nm not in gpus: gpus.append(nm)
        except Exception: pass

        uuid = (getattr(sysprod, "UUID", None) or "").strip() if sysprod else ""
        bios_sn = getattr(bios_info, "SerialNumber", None) if bios_info else None
        base_sn = getattr(baseboard, "SerialNumber", None) if baseboard else None
        serial = None
        for s in (bios_sn, base_sn):
            if valid_serial(s):
                if s:
                    serial = str(s).strip() 
                    break

        # System SKU (best-effort)
        system_sku = getattr(sysprod, "Name", None) or ""
        if not system_sku:
            try:
                system_sku = getattr(system_info, "SystemSKUNumber", "") or ""
            except Exception:
                pass

        data = {
            "Collector": "WMI",
            "Asset Type": "Windows",
            "Asset UUID": uuid or "N/A",
            "Serial Number": serial or "N/A",
            "MAC Address": primary_mac or "No MAC Address Found",
            "All MACs": ", ".join(sorted(set(mac_addresses_full))) if mac_addresses_full else "N/A",
            "IP Address": ip_address,
            "Hostname": getattr(system_info, "Name", "N/A") if system_info else "N/A",
            "Working User": getattr(system_info, "UserName", None) or "No user logged in",
            "Domain": getattr(system_info, "Domain", "N/A") if system_info else "N/A",
            "Device Model": getattr(system_info, "Model", "N/A") if system_info else "N/A",
            "Manufacturer": getattr(system_info, "Manufacturer", "N/A") if system_info else "N/A",
            "OS Name and Version": getattr(os_info, "Caption", "N/A") if os_info else "N/A",
            "Installed RAM (GB)": total_ram_gb,
            "CPU Processor": cpu_summary,
            "Storage (Hard Disk)": "\n".join(disk_info) if disk_info else "N/A",
            "Monitor": monitor_name,
            "Graphics Card": ", ".join(gpus) if gpus else "No GPU Found",
            "System SKU": system_sku or "N/A",
            "Connected Screens": connected_screens
        }
        return data
    except Exception as e:
        return {"Error": f"WMI error: {e}"}
    finally:
        try: 
            if pythoncom and hasattr(pythoncom, 'CoUninitialize'):
                pythoncom.CoUninitialize()
        except (AttributeError, Exception):
            pass  # CoUninitialize not available or already called

# =================== Linux/ESXi via SSH ===================
def collect_linux_or_esxi_ssh(ip, username, password=None, pkey=None, port=22, timeout=6):
    data = {"IP Address": ip}
    client = None
    try:
        client = ssh_connect(ip, username, password, pkey, port, timeout)

        uname = _ssh_run(client, "uname -a || true")
        pretty = _ssh_run(client, "grep -m1 '^PRETTY_NAME=' /etc/os-release 2>/dev/null | cut -d '\"' -f2 || true")

        # ESXi detection
        esx_ver = _ssh_run(client, "vmware -v 2>/dev/null || esxcli system version get 2>/dev/null || true")
        if "VMware ESXi" in esx_ver or "Product:" in esx_ver:
            data.update({
                "Collector": "SSH",
                "Asset Type": "Hypervisor",
                "Hostname": _ssh_run(client, "hostname || true"),
                "OS Name and Version": esx_ver.strip() or "VMware ESXi",
                "Device Model": _ssh_run(client, "localcli hardware platform get 2>/dev/null | awk -F: '/Product Name/ {sub(/^ */,\"\",$2); print $2}' || true"),
                "Manufacturer": _ssh_run(client, "localcli hardware platform get 2>/dev/null | awk -F: '/Vendor Name/ {sub(/^ */,\"\",$2); print $2}' || true"),
                "Serial Number": _ssh_run(client, "localcli hardware platform get 2>/dev/null | awk -F: '/Serial Number/ {sub(/^ */,\"\",$2); print $2}' || true").strip() or "N/A",
            })
            macs = _ssh_run(client, "esxcli network nic list 2>/dev/null | awk 'NR>1{print $2}' | tr '\\n' ', ' || true")
            first_mac = (macs.split(',')[0] if macs else "").strip()
            data["All MACs"] = macs if macs else "N/A"
            data["MAC Address"] = normalize_mac(first_mac) if first_mac else "No MAC Address Found"
            data["System SKU"] = "N/A"
            data["Connected Screens"] = "0"
            data["Graphics Card"] = "N/A"
            return data

        # Linux path
        data.update({
            "Collector": "SSH",
            "Asset Type": "Linux",
            "Hostname": _ssh_run(client, "hostname || true"),
            "OS Name and Version": pretty if pretty else uname,
            "Kernel": _ssh_run(client, "uname -r || true")
        })

        uuid = _ssh_run(client, "cat /sys/class/dmi/id/product_uuid 2>/dev/null || true")
        serial = _ssh_run(client, "cat /sys/class/dmi/id/product_serial 2>/dev/null || true")
        vendor = _ssh_run(client, "cat /sys/class/dmi/id/sys_vendor 2>/dev/null || true")
        model  = _ssh_run(client, "cat /sys/class/dmi/id/product_name 2>/dev/null || true")
        sku    = _ssh_run(client, "cat /sys/class/dmi/id/product_sku 2>/dev/null || true")

        data["Asset UUID"]     = uuid if uuid else "N/A"
        data["Serial Number"]  = serial if serial else "N/A"
        data["Manufacturer"]   = vendor if vendor else "N/A"
        data["Device Model"]   = model if model else "N/A"
        data["System SKU"]     = sku if sku else "N/A"

        lscpu_out = _ssh_run(client, "LC_ALL=C lscpu 2>/dev/null || true")
        def _grep_num(key):
            m = re.search(rf"^{re.escape(key)}:\s*(\d+)", lscpu_out, re.MULTILINE)
            return int(m.group(1)) if m else 0
        m = re.search(r"^Model name:\s*(.+)$", lscpu_out, re.MULTILINE)
        cpu_model = (m.group(1).strip() if m else "") or _ssh_run(
            client, "grep -m1 'model name' /proc/cpuinfo 2>/dev/null | cut -d: -f2- | xargs || true"
        )
        sockets = _grep_num("Socket\\(s\\)")
        cores_per_socket = _grep_num("Core\\(s\\) per socket")
        threads_per_core = _grep_num("Thread\\(s\\) per core")
        total_cores = sockets * cores_per_socket or _grep_num("CPU\\(s\\)")
        total_threads = (total_cores * threads_per_core) if (total_cores and threads_per_core) else _grep_num("CPU\\(s\\)")
        data["CPU Processor"] = f"{cpu_model} ({sockets or 1} socket(s), {total_cores or 'N/A'} cores, {total_threads or 'N/A'} threads)".strip()

        mem_kb = _ssh_run(client, "awk '/MemTotal/ {print $2}' /proc/meminfo 2>/dev/null || true")
        try:
            data["Installed RAM (GB)"] = round(int(mem_kb) / (1024**2), 2) if mem_kb.isdigit() else "N/A"
        except Exception:
            data["Installed RAM (GB)"] = "N/A"

        data["Storage (Hard Disk)"] = _ssh_run(
            client,
            "lsblk -b -dn -o NAME,SIZE,TYPE 2>/dev/null | awk '$3==\"disk\"{i++; printf \"Disk %d = %.2fGB\\n\", i, $2/1024/1024/1024}' || true"
        )

        first_mac = _ssh_run(client, "ip -o link show up 2>/dev/null | awk '{for(i=1;i<=NF;i++) if ($i==\"link/ether\") {print $(i+1); exit}}' || true")
        all_macs  = _ssh_run(client, "ip -o link 2>/dev/null | awk '{for(i=1;i<=NF;i++) if ($i==\"link/ether\") print $(i+1)}' | tr '\\n' ', ' || true")
        data["All MACs"]   = all_macs if all_macs else "N/A"
        data["MAC Address"] = normalize_mac(first_mac) if first_mac else "No MAC Address Found"

        # Linux desktop: try detect GPUs / screens (best effort, often servers N/A)
        gpus = _ssh_run(client, "lspci 2>/dev/null | awk -F': ' '/VGA|3D/{print $3}' | tr '\\n' ', ' || true").strip()
        data["Graphics Card"] = gpus if gpus else "N/A"
        data["Connected Screens"] = "N/A"

        return data
    except Exception as e:
        return {"Error": f"SSH error: {e}"}
    finally:
        try:
            if client: client.close()
        except Exception:
            pass

# =================== SNMP & HTTP ===================
def snmp_auth(v2c_comm=None, v3=None):
    if not _PYSNMP_OK: return None
    if v3 and v3.get("user"):
        authp = usmHMACSHAAuthProtocol if v3.get("auth_proto","SHA").upper().startswith("SHA") else usmHMACMD5AuthProtocol
        privp = usmAesCfb128Protocol if "AES" in v3.get("priv_proto","AES").upper() else usmDESPrivProtocol
        return UsmUserData(v3["user"], v3.get("auth_key") or None, v3.get("priv_key") or None,
                           authProtocol=authp, privProtocol=privp)
    return CommunityData(v2c_comm or "public", mpModel=1)

def snmp_get_any(ip, oid, v2c_comm=None, v3=None, timeout=1, retries=1, port=161):
    if not _PYSNMP_OK: return None
    try:
        auth = snmp_auth(v2c_comm, v3)
        if auth is None: return None
        iterator = getCmd(
            SnmpEngine(), auth, UdpTransportTarget((ip, port), timeout=timeout, retries=retries),
            ContextData(), ObjectType(ObjectIdentity(oid))
        )
        errorIndication, errorStatus, errorIndex, varBinds = next(iterator)
        if errorIndication or errorStatus:
            return None
        return str(varBinds[0][1])
    except Exception:
        return None

def snmp_walk(ip, oid_prefix, v2c_comm=None, v3=None, timeout=1, retries=1, port=161, maxrows=50):
    if not _PYSNMP_OK: return []
    out = []
    try:
        auth = snmp_auth(v2c_comm, v3)
        if auth is None: return out
        for (errorIndication, errorStatus, errorIndex, varBinds) in nextCmd(
            SnmpEngine(), auth, UdpTransportTarget((ip, port), timeout=timeout, retries=retries),
            ContextData(), ObjectType(ObjectIdentity(oid_prefix)), lexicographicMode=False
        ):
            if errorIndication or errorStatus:
                break
            for varBind in varBinds:
                oid, val = varBind
                s = str(oid)
                if not s.startswith(oid_prefix):
                    return out
                out.append(str(val))
                if len(out) >= maxrows:
                    return out
    except Exception:
        pass
    return out

VENDOR_OIDS = {
    "ENTITY_SERIAL": "1.3.6.1.2.1.47.1.1.1.1.11.1",
    "ENTITY_MODEL":  "1.3.6.1.2.1.47.1.1.1.1.13.1",
    "PRT_GENERAL":   "1.3.6.1.2.1.43.5.1.1.16.1",
    "VMW_NAME":      "1.3.6.1.4.1.6876.1.1.0",
    "VMW_VER":       "1.3.6.1.4.1.6876.1.2.0",
    "LLDP_SYSNAME":  "1.0.8802.1.1.2.1.4.1.1.9"
}

def vendor_from_sysdescr(sd_lower: str):
    mapping = [
        ("cisco","Cisco"), ("forti","Fortinet"), ("hewlett","HP"), ("hp ","HP"), ("canon","Canon"),
        ("kyocera","Kyocera"), ("ricoh","Ricoh"), ("xerox","Xerox"), ("brother","Brother"),
        ("yealink","Yealink"), ("grandstream","Grandstream"), ("polycom","Polycom"),
        ("ubiquiti","Ubiquiti"), ("mikrotik","MikroTik"), ("tp-link","TP-Link"), ("tplink","TP-Link"),
        ("vmware","VMware")
    ]
    for k,v in mapping:
        if k in sd_lower: return v
    return None

def http_fingerprint(ip: str, timeout: float = 1.2):
    out = {}
    def probe(url):
        try:
            r = requests.get(url, timeout=timeout, verify=False, allow_redirects=True)
            return r
        except Exception:
            return None
    r = probe(f"http://{ip}")
    if not r: r = probe(f"https://{ip}")
    if r:
        out["server"] = r.headers.get("Server", "")
        m = re.search(r"<title>(.*?)</title>", r.text, re.IGNORECASE | re.DOTALL)
        out["title"] = (m.group(1).strip() if m else "")
        body_l = r.text.lower()
        server_l = (out.get("server") or "").lower()
        title_l  = (out.get("title") or "").lower()
        if any(k in (title_l+server_l+body_l) for k in ["webos","tizen","bravia","hisense","smart tv","android tv","philips tv"]):
            out["type_guess"] = "Smart Display"
        hints = [
            ("HP LaserJet", "Printer"), ("Kyocera Command Center","Printer"), ("Ricoh Web Image Monitor","Printer"),
            ("Xerox","Printer"), ("Brother","Printer"), ("Canon","Printer"),
            ("Yealink","IP Phone"), ("Grandstream","IP Phone"), ("3CX","PBX"),
            ("Ubiquiti","Switch/Router"), ("EdgeOS","Router"), ("MikroTik","Router/Switch"),
            ("FortiGate","Firewall"), ("Cisco","Switch/Router"), ("VMware ESXi","Hypervisor"),
        ]
        for k, tg in hints:
            if k.lower() in (title_l+body_l+server_l):
                out["type_guess"] = tg; break
    return out

def snmp_collect_basic(ip, communities: list[str], v3=None):
    if not _PYSNMP_OK:
        return {"Error": "pysnmp not installed"}
    orders = []
    if v3 and v3.get("user"): orders.append(None)  # v3
    # v2c list
    orders += [c for c in (communities or []) if c.strip()] or ["public"]
    for comm in orders:
        try:
            data = {"Collector": ("SNMPv3" if (v3 and v3.get("user")) else f"SNMP:{comm or 'v3'}"),
                    "Asset Type": "SNMP Device", "IP Address": ip}
            sysDescr = snmp_get_any(ip, "1.3.6.1.2.1.1.1.0", v2c_comm=comm, v3=v3)
            sysName  = snmp_get_any(ip, "1.3.6.1.2.1.1.5.0", v2c_comm=comm, v3=v3)
            if not (sysDescr or sysName):
                continue
            data["sysDescr"] = sysDescr or ""
            data["Hostname"] = sysName or ""
            serial = snmp_get_any(ip, VENDOR_OIDS["ENTITY_SERIAL"], v2c_comm=comm, v3=v3)
            model  = snmp_get_any(ip, VENDOR_OIDS["ENTITY_MODEL"],  v2c_comm=comm, v3=v3)
            if serial and valid_serial(serial): data["Serial Number"] = serial
            if model: data["Device Model"] = model
            vend = vendor_from_sysdescr((data.get("sysDescr","")).lower())
            if vend: data["Manufacturer"] = vend

            vmw_prod = snmp_get_any(ip, VENDOR_OIDS["VMW_NAME"], v2c_comm=comm, v3=v3)
            vmw_ver  = snmp_get_any(ip, VENDOR_OIDS["VMW_VER"],  v2c_comm=comm, v3=v3)
            if vmw_prod:
                data["Asset Type"] = "Hypervisor"
                data["OS Name and Version"] = f"{vmw_prod} {vmw_ver or ''}".strip()

            # light LLDP/ports/vlans (optional information â€“ not used directly in final sheet)
            # ... kept minimal to not affect performance

            return data
        except Exception:
            continue
    return {"Error": "SNMP unreachable/all credentials failed"}

# =================== Categorization -> Device Infrastructure ===================
def infer_infra(data: dict) -> str:
    atype = (data.get("Asset Type") or "").lower()
    descr = (data.get("sysDescr") or "").lower()
    title = (data.get("HTTP Title") or "").lower()
    manuf = (data.get("Manufacturer") or "").lower()
    model = (data.get("Device Model") or "").lower()

    if "windows" in atype: return "Windows"
    if "linux"   in atype: return "Linux"
    if "hypervisor" in atype or "vmware" in descr or "esxi" in title: return "Hypervisor"

    # Printers / Phones / Firewalls / Switches / Routers / AP / Smart Display
    bank = descr + " " + title + " " + manuf + " " + model
    if any(k in bank for k in ["printer","laserjet","officejet","bizhub","imageclass","ricoh","kyocera","xerox","brother","canon","command center"]):
        return "Printer"
    if any(k in bank for k in ["yealink","grandstream","polycom","ip phone","pbx","3cx","freepbx","asterisk"]):
        return "IP Phone/PBX"
    if "fortigate" in bank or "fortios" in bank: return "Firewall"
    if "switch" in bank or "catalyst" in bank or "edgeswitch" in bank: return "Switch"
    if "router" in bank or "edgeos" in bank or "mikrotik" in bank: return "Router"
    if "ap " in bank or " access point" in bank or "fortiap" in bank or "omada" in bank: return "Access Point"
    if data.get("HTTP Type") == "Smart Display" or any(k in bank for k in ["smart tv","webos","bravia","tizen","android tv","hisense","philips tv"]):
        return "Smart Display"
    if atype == "snmp device": return "Network Device"
    if atype == "http device": return "HTTP Device"
    return "Unknown"

# =================== HTTP Guess ===================
def http_guess(ip):
    try:
        return http_fingerprint(ip)
    except Exception:
        return {}

# =================== Nmap Discovery ===================
def nmap_discover(hosts: list[str], ports: str = "22,80,135,139,161,443,445,631,8080,8443"):
    results = {}
    if not NMAP_BIN: return results
    try:
        cmd = [NMAP_BIN, "-n", "-Pn", "-T4", "--open", "-p", ports, "-oG", "-"] + hosts
        out = subprocess.check_output(cmd, stderr=subprocess.STDOUT, timeout=180, text=True)
        for line in out.splitlines():
            if not line.startswith("Host:"): continue
            m = re.search(r"Host:\s+(\S+)", line)
            if not m: continue
            ip = m.group(1)
            ports_seg = re.search(r"Ports:\s+(.+)", line)
            open_set = set()
            if ports_seg:
                for p in ports_seg.group(1).split(","):
                    ps = p.strip().split("/")
                    if len(ps) >= 2 and ps[1] == "open":
                        try: open_set.add(int(ps[0]))
                        except Exception: pass
            if open_set:
                results[ip] = open_set
    except Exception:
        pass
    return results

# =================== Collect Any ===================
def collect_any(ip, creds_windows, creds_linux, snmp_v2c, snmp_v3, use_http=True):
    p22  = is_tcp_open(ip, 22, 0.6)
    p135 = is_tcp_open(ip, 135, 0.6)
    p445 = is_tcp_open(ip, 445, 0.6)
    p161 = is_tcp_open(ip, 161, 0.6)

    # Windows
    if (p135 or p445) and creds_windows:
        for u,p in creds_windows:
            d = collect_windows_wmi(ip, u, p)
            if "Error" not in d:
                if use_http:
                    http = http_guess(ip)
                    d["HTTP Title"]  = http.get("title","")
                    d["HTTP Server"] = http.get("server","")
                    if http.get("type_guess") == "Smart Display": d["HTTP Type"] = "Smart Display"
                return d

    # Linux/ESXi
    if p22 and creds_linux:
        for u,p in creds_linux:
            d = collect_linux_or_esxi_ssh(ip, u, p)
            if "Error" not in d:
                if use_http:
                    http = http_guess(ip)
                    d["HTTP Title"]  = http.get("title","")
                    d["HTTP Server"] = http.get("server","")
                    if http.get("type_guess") == "Smart Display": d["HTTP Type"] = "Smart Display"
                return d

    # SNMP
    if _PYSNMP_OK and ((snmp_v3 and snmp_v3.get("user")) or p161):
        d = snmp_collect_basic(ip, [], v3=snmp_v3)
        if "Error" not in d:
            if use_http:
                http = http_guess(ip)
                d["HTTP Title"]  = http.get("title","")
                d["HTTP Server"] = http.get("server","")
                if http.get("type_guess") == "Smart Display": d["HTTP Type"] = "Smart Display"
            return d
    if _PYSNMP_OK and snmp_v2c:
        d = snmp_collect_basic(ip, snmp_v2c, v3=None)
        if "Error" not in d:
            if use_http:
                http = http_guess(ip)
                d["HTTP Title"]  = http.get("title","")
                d["HTTP Server"] = http.get("server","")
                if http.get("type_guess") == "Smart Display": d["HTTP Type"] = "Smart Display"
            return d

    # HTTP only
    http = http_guess(ip) if use_http else {}
    if http:
        return {
            "Collector": "HTTP",
            "Asset Type": "HTTP Device",
            "Asset UUID": "N/A",
            "Serial Number": "N/A",
            "MAC Address": "No MAC Address Found",
            "All MACs": "N/A",
            "IP Address": ip,
            "Hostname": http.get("title","") or "N/A",
            "Device Model": "N/A",
            "Manufacturer": "N/A",
            "OS Name and Version": "N/A",
            "HTTP Server": http.get("server",""),
            "HTTP Title": http.get("title",""),
            "System SKU": "N/A",
            "Graphics Card": "N/A",
            "Connected Screens": "N/A"
        }

    return {"Error": "No suitable collector/credentials", "IP Address": ip}

# =================== Excel (ONE SHEET) ===================
ASSETS_SHEET = "Assets"
ASSET_HEADERS = [
    "Hostname",
    "Working User",
    "Domain",
    "Device Model",
    "Device Infrastructure",
    "OS Name",
    "Installed RAM (GB)",
    "LAN IP Address",
    "Storage",
    "Manufacturer",
    "Serial Number",
    "Processor",
    "System SKU",
    "Active GPU",
    "Connected Screens"
]

def _open_or_new_workbook(path):
    if path and os.path.exists(path):
        try: return load_workbook(path)
        except Exception: return Workbook()
    return Workbook()

def ensure_assets_sheet(wb):
    if ASSETS_SHEET not in wb.sheetnames:
        ws = wb.create_sheet(ASSETS_SHEET)
        ws.append(ASSET_HEADERS)
        format_excel_header(ws)
    else:
        ws = wb[ASSETS_SHEET]
        # force headers exactly
        existing = [str(c.value).strip() if c.value is not None else "" for c in ws[1]]
        if existing != ASSET_HEADERS:
            # rebuild first row
            for i,h in enumerate(ASSET_HEADERS, start=1):
                ws.cell(row=1, column=i).value = h
            format_excel_header(ws)
    return ws

def format_excel_header(ws):
    for cell in ws[1]:
        cell.font = Font(bold=True, color="FFFFFF")
        cell.fill = PatternFill("solid", fgColor="FF4F81BD")
        cell.alignment = Alignment(horizontal="center", vertical="center")

def autosize_and_wrap(ws):
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
        for cell in row:
            cell.alignment = Alignment(wrap_text=True, vertical="top")
    for col in ws.columns:
        max_length = 0
        try:
            col_letter = col[0].column_letter
        except Exception:
            continue
        for cell in col:
            try:
                if cell.value is not None:
                    max_length = max(max_length, len(str(cell.value)))
            except Exception:
                pass
        ws.column_dimensions[col_letter].width = min(max_length + 2, 80)

def col_idx_by_header(ws, header_name: str) -> int | None:
    for i, cell in enumerate(ws[1], start=1):
        if str(cell.value).strip() == header_name:
            return i
    return None

def locate_row_by_identity(ws, kind, val):
    if not (kind and val): return None
    # identity columns we keep in hidden memory by re-mapping to visible columns
    # We'll search by:
    #  - Serial Number if kind=='serial'
    #  - Hostname/MAC not present -> we also check IP fallback later
    header_map = {"serial":"Serial Number"}
    target_header = header_map.get(kind)
    if not target_header:
        # if mac/uuid are not in the sheet, cannot match directly
        return None
    c = col_idx_by_header(ws, target_header)
    if not c: return None
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
        cellv = row[c-1].value
        if target_header=="Serial Number":
            if (str(cellv or "").strip())==(str(val or "").strip()):
                return row[0].row
    return None

def find_row_by_ip(ws, ip):
    c = col_idx_by_header(ws, "LAN IP Address")
    if not c: return None
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
        if str(row[c-1].value or "").strip() == str(ip).strip():
            return row[0].row
    return None

def map_data_to_row(data: dict) -> list:
    # map from collected rich data -> flat columns
    hostname = data.get("Hostname") or data.get("sysName") or "N/A"
    working_user = data.get("Working User") or "N/A"
    domain = data.get("Domain") or "N/A"
    device_model = data.get("Device Model") or "N/A"
    infra = infer_infra(data)
    os_name = (data.get("OS Name and Version") or data.get("OS Name") or "N/A")
    ram = data.get("Installed RAM (GB)") if data.get("Installed RAM (GB)") not in (None, "") else "N/A"
    ipaddr = data.get("IP Address") or "N/A"
    storage = data.get("Storage (Hard Disk)") or data.get("Storage") or "N/A"
    manufacturer = data.get("Manufacturer") or "N/A"
    serial = data.get("Serial Number") or "N/A"
    cpu = data.get("CPU Processor") or data.get("Processor") or "N/A"
    sku = data.get("System SKU") or "N/A"
    gpu = data.get("Graphics Card") or data.get("Active GPU") or "N/A"
    screens = data.get("Connected Screens") or "N/A"

    vals = [
        hostname, working_user, domain, device_model, infra, os_name,
        ram, ipaddr, storage, manufacturer, serial, cpu, sku, gpu, screens
    ]
    return [excel_sanitize(v) for v in vals]

def upsert_into_assets(wb, data: dict):
    ws = ensure_assets_sheet(wb)

    kind, val = pick_identity_from_data(data)  # uuid/serial/mac
    # We only store Serial directly, so that's the reliable identity.
    row_idx = None
    if kind == "serial" and val:
        row_idx = locate_row_by_identity(ws, kind, val)
    # Fallback by IP if no serial identity matched
    if not row_idx and data.get("IP Address"):
        row_idx = find_row_by_ip(ws, data["IP Address"])

    row_data = map_data_to_row(data)

    if row_idx:
        # update in place
        for col_i, v in enumerate(row_data, start=1):
            ws.cell(row=row_idx, column=col_i, value=v)
    else:
        ws.append(row_data)

# =================== Active Directory (merge into Assets) ===================
def _to_str(v):
    try:
        if isinstance(v, (datetime, date, time)):
            return excel_sanitize(v)
        return str(v)
    except Exception:
        return ""

def ad_fetch_computers(server_host, base_dn, username, password, use_ssl=False, timeout=8):
    try:
        tls = Tls(validate=ssl.CERT_NONE) if use_ssl else None
        server = Server(server_host, use_ssl=use_ssl, get_info=ALL, tls=tls, connect_timeout=timeout)
        conn = Connection(server, user=username, password=password)
        conn.bind()
        conn.search(
            search_base=base_dn,
            search_filter="(objectClass=computer)",
            attributes=["name","dNSHostName","operatingSystem","operatingSystemVersion","lastLogonTimestamp","whenCreated","distinguishedName","objectGUID","objectSid"]
        )
        items = []
        for entry in conn.entries:
            e = entry.entry_attributes_as_dict
            def val(k):
                v = e.get(k)
                if isinstance(v, list): v = v[0] if v else ""
                return _to_str(v)
            items.append({
                "Hostname": (val("dNSHostName") or val("name") or "").split(".")[0],
                "FQDN": val("dNSHostName"),
                "OS Name and Version": val("operatingSystem") or "",
                "OS Version": val("operatingSystemVersion") or "",
                "AD whenCreated": val("whenCreated"),
                "AD lastLogonTimestamp": val("lastLogonTimestamp"),
                "DN": val("distinguishedName"),
                "objectGUID": val("objectGUID"),
                "objectSid": val("objectSid"),
            })
        conn.unbind()
        return items
    except Exception as e:
        return {"Error": f"AD error: {e}"}

def merge_ad_into_assets(ad_list, excel_file, log_signal):
    try:
        wb = _open_or_new_workbook(excel_file)
        ws = ensure_assets_sheet(wb)

        # Build index by Hostname in Assets
        c_hn = col_idx_by_header(ws, "Hostname")
        index = {}
        if c_hn:
            for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
                hn = str(row[c_hn-1].value or "").strip().lower()
                if not hn: continue
                index[hn] = row[0].row

        for item in ad_list if isinstance(ad_list, list) else []:
            hn = (item.get("Hostname") or "").strip()
            if not hn: continue
            row_idx = index.get(hn.lower())

            mapped = {
                "Hostname": hn,
                "Working User": "N/A",
                "Domain": (item.get("FQDN","").split(".",1)[-1] if "." in (item.get("FQDN","") or "") else "N/A"),
                "Device Model": "N/A",
                "Device Infrastructure": "Windows",  # AD computer -> Windows by default
                "OS Name": item.get("OS Name and Version","") or "N/A",
                "Installed RAM (GB)": "N/A",
                "LAN IP Address": "N/A",
                "Storage": "N/A",
                "Manufacturer": "N/A",
                "Serial Number": "N/A",
                "Processor": "N/A",
                "System SKU": "N/A",
                "Active GPU": "N/A",
                "Connected Screens": "N/A"
            }
            row_vals = [excel_sanitize(mapped.get(h, "N/A")) for h in ASSET_HEADERS]

            if row_idx:
                # update only empty or N/A cells with AD info (donâ€™t override richer scan info)
                for i, h in enumerate(ASSET_HEADERS, start=1):
                    curv = ws.cell(row=row_idx, column=i).value
                    if (not curv) or str(curv).strip().upper() in ("N/A", ""):
                        ws.cell(row=row_idx, column=i, value=row_vals[i-1])
                _safe_log(log_signal, f"AD enriched existing asset: {hn}")
            else:
                ws.append(row_vals)
                _safe_log(log_signal, f"AD added new asset (AD-only): {hn}")

        autosize_and_wrap(ws)
        wb.save(excel_file)
        _safe_log(log_signal, "AD merge completed.")
    except Exception as e:
        _safe_log(log_signal, f"Failed AD merge: {e}")

# =================== Worker Threads ===================
class ADWorker(QThread):
    log_message = pyqtSignal(str)
    finished_ok = pyqtSignal(bool)
    def __init__(self, server, base_dn, user, pwd, use_ssl, excel_file, parent=None):
        super().__init__(parent)
        self.server, self.base_dn, self.user, self.pwd, self.use_ssl, self.excel_file = server, base_dn, user, pwd, use_ssl, excel_file
    def run(self):
        try:
            _safe_log(self.log_message, "Fetching computers from AD...")
            res = ad_fetch_computers(self.server, self.base_dn, self.user, self.pwd, use_ssl=self.use_ssl)
            if isinstance(res, dict) and "Error" in res:
                _safe_log(self.log_message, res.get("Error", "Unknown AD error"))
                self.finished_ok.emit(False); return
            _safe_log(self.log_message, f"AD fetched {len(res)} computer objects. Merging...")
            merge_ad_into_assets(res, self.excel_file, self.log_message)
            self.finished_ok.emit(True)
        except Exception as e:
            _safe_log(self.log_message, f"AD worker error: {e}")
            self.finished_ok.emit(False)

class DeviceInfoCollector(QThread):
    update_progress = pyqtSignal(int)
    log_message = pyqtSignal(str)
    finished_with_status = pyqtSignal(bool)
    def __init__(self, targets, win_creds, linux_creds, snmp_v2c, snmp_v3, excel_file, use_http=True, parent=None):
        super().__init__(parent)
        self.targets   = targets
        self.win_creds = win_creds or []
        self.linux_creds = linux_creds or []
        self.snmp_v2c  = snmp_v2c or []
        self.snmp_v3   = snmp_v3 or {}
        self.excel_file = excel_file
        self.use_http  = use_http
        self._cancel_event = threading.Event()

    def stop(self):
        self._cancel_event.set()

    def _expand_targets(self) -> list[str]:
        ips = []
        for t in self.targets:
            t = t.strip()
            if not t: continue
            try:
                if "/" in t:
                    ips.extend([str(h) for h in ipaddress.IPv4Network(t, strict=False).hosts()])
                else:
                    ips.append(str(ipaddress.IPv4Address(t)))
            except Exception:
                _safe_log(self.log_message, f"Invalid target skipped: {t}")
        uniq, seen = [], set()
        for ip in ips:
            if ip not in seen:
                seen.add(ip); uniq.append(ip)
        return uniq

    def run(self):
        canceled = False
        try:
            ip_list = self._expand_targets()
            if not ip_list:
                _safe_log(self.log_message, "No valid targets to scan.")
                self.update_progress.emit(0); return
            _safe_log(self.log_message, f"Targets provided: {len(ip_list)}")

            # Nmap assist
            nmap_map = nmap_discover(ip_list) if NMAP_BIN else {}
            if nmap_map:
                _safe_log(self.log_message, f"Nmap assisted discovery active. Hosts with open ports: {len(nmap_map)}")
                ip_order = list(nmap_map.keys()) + [ip for ip in ip_list if ip not in nmap_map]
            else:
                ip_order = ip_list

            wb = _open_or_new_workbook(self.excel_file)
            ensure_assets_sheet(wb)

            completed = 0
            lock = threading.Lock()
            max_workers = min(32, max(8, (os.cpu_count() or 8) * 2))

            def process_ip(ip_str):
                if self._cancel_event.is_set(): return
                _safe_log(self.log_message, f"Processing {ip_str}")
                alive = is_alive(ip_str)
                if not alive:
                    try_open = any(is_tcp_open(ip_str, p, 0.5) for p in (80,443,22,135,445,161,631,8080,8443))
                    alive = try_open or (ip_str in nmap_map)

                if alive:
                    data = collect_any(ip_str, self.win_creds, self.linux_creds, self.snmp_v2c, self.snmp_v3, use_http=self.use_http)
                else:
                    # try HTTP even if ping blocked
                    http = http_guess(ip_str) if self.use_http else {}
                    if http:
                        data = {
                            "Collector": "HTTP",
                            "Asset Type": "HTTP Device",
                            "Asset UUID": "N/A",
                            "Serial Number": "N/A",
                            "MAC Address": "No MAC Address Found",
                            "All MACs": "N/A",
                            "IP Address": ip_str,
                            "Hostname": http.get("title","") or "N/A",
                            "Device Model": "N/A",
                            "Manufacturer": "N/A",
                            "OS Name and Version": "N/A",
                            "HTTP Server": http.get("server",""),
                            "HTTP Title": http.get("title",""),
                            "System SKU": "N/A",
                            "Graphics Card": "N/A",
                            "Connected Screens": "N/A"
                        }
                    else:
                        data = {"Error":"Host unreachable", "IP Address": ip_str}

                with lock:
                    if "Error" not in data or data.get("Asset Type"):
                        upsert_into_assets(wb, data)
                    else:
                        # still record minimal row with IP if not exists
                        minimal = {
                            "Hostname": "N/A", "Working User": "N/A", "Domain": "N/A",
                            "Device Model": "N/A", "Device Infrastructure": "Unknown",
                            "OS Name": "N/A", "Installed RAM (GB)": "N/A",
                            "LAN IP Address": data.get("IP Address","N/A"),
                            "Storage": "N/A", "Manufacturer": "N/A", "Serial Number": "N/A",
                            "Processor": "N/A", "System SKU": "N/A", "Active GPU": "N/A",
                            "Connected Screens": "N/A"
                        }
                        row_vals = [excel_sanitize(minimal.get(h,'N/A')) for h in ASSET_HEADERS]
                        ws = ensure_assets_sheet(wb)
                        if not find_row_by_ip(ws, minimal["LAN IP Address"]):
                            ws.append(row_vals)

                    nonlocal completed
                    completed += 1
                    if completed % 10 == 0:
                        wb.save(self.excel_file)
                    self.update_progress.emit(int((completed/len(ip_order))*100))

            with ThreadPoolExecutor(max_workers=max_workers) as executor:
                futures = [executor.submit(process_ip, ip) for ip in ip_order]
                for _ in as_completed(futures):
                    if self._cancel_event.is_set():
                        canceled = True
                        break

            autosize_and_wrap(ensure_assets_sheet(wb))
            wb.save(self.excel_file)
            _safe_log(self.log_message, "Scan canceled by user." if canceled else "Data collection completed.")
        except Exception as e:
            _safe_log(self.log_message, f"Error: {e}")
        finally:
            self.finished_with_status.emit(self._cancel_event.is_set())

# =================== Main Window ===================
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Network Assets Collector â€” Pro Edition (Single Sheet)")
        self.setGeometry(60, 60, 1100, 780)

        # --- Compat aliases (put these inside class MainWindow) ---
        def load_windows_creds(self):
            self.load_windows_creds_safe()

        def load_linux_creds(self):
            self.load_linux_creds_safe()

        try:
            if os.path.exists("ico.ico"):
                self.setWindowIcon(QIcon("ico.ico"))
        except Exception:
            pass

        self.cfg = load_config()
        main_layout = QVBoxLayout()

        # Logo (optional)
        self.logo_label = QLabel(self)
        try:
            base_dir = os.path.dirname(os.path.abspath(__file__))
        except Exception:
            base_dir = os.getcwd()
        logo_path = os.path.join(base_dir, "SQ.svg")
        if os.path.exists(logo_path):
            try:
                pix = QPixmap(logo_path)
                self.logo_label.setPixmap(pix.scaled(420, 90, Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation))
            except Exception:
                pass
        main_layout.addWidget(self.logo_label, alignment=Qt.AlignmentFlag.AlignCenter)

        sig = QLabel("Developed by: Mostafa Mohamed", self)
        sig.setAlignment(Qt.AlignmentFlag.AlignCenter)
        sig.setFont(QFont("Consolas", 12, QFont.Weight.Bold))
        sig.setStyleSheet("""QLabel { color: #00AA88; font-style: italic; letter-spacing: 1px; }""")
        main_layout.addWidget(sig, alignment=Qt.AlignmentFlag.AlignCenter)

        # ===== Scanning & File =====
        group_box = QGroupBox("Scanning & Data Collection")
        group_layout = QVBoxLayout()

        net_layout = QHBoxLayout()
        net_layout.addWidget(QLabel("Enter IPs/Subnets (comma-separated):"))
        self.target_entry = QLineEdit()
        self.target_entry.setPlaceholderText("192.168.1.10, 192.168.1.0/24, ...")
        net_layout.addWidget(self.target_entry)
        group_layout.addLayout(net_layout)

        file_layout = QHBoxLayout()
        self.select_file_button = QPushButton("Select Excel File")
        self.select_file_button.clicked.connect(self.browse_file)
        self.excel_file_entry = QLineEdit()
        self.excel_file_entry.setPlaceholderText("Selected file path...")
        self.browse_button = QPushButton("Browse")
        self.browse_button.clicked.connect(self.browse_file)
        file_layout.addWidget(self.select_file_button); file_layout.addWidget(self.excel_file_entry); file_layout.addWidget(self.browse_button)
        group_layout.addLayout(file_layout)

        # ===== Windows creds =====
        win_box = QGroupBox("Windows Credentials (WMI) â€” stored securely")
        win_l = QVBoxLayout()
        self.win_creds_layout = QVBoxLayout()
        btns = QHBoxLayout()
        self.btn_add_win = QPushButton("Add Windows Credential")
        self.btn_add_win.clicked.connect(self.add_windows_cred_safe)
        self.btn_save_win = QPushButton("Save Windows Credentials")
        self.btn_save_win.clicked.connect(self.save_windows_creds_safe)
        self.btn_load_win = QPushButton("Load Windows Credentials")
        self.btn_load_win.clicked.connect(self.load_windows_creds_safe)
        btns.addWidget(self.btn_add_win); btns.addWidget(self.btn_save_win); btns.addWidget(self.btn_load_win)
        win_l.addLayout(self.win_creds_layout); win_l.addLayout(btns)
        win_box.setLayout(win_l)
        group_layout.addWidget(win_box)

        # ===== Linux/ESXi creds =====
        lin_box = QGroupBox("Linux/ESXi Credentials (SSH) â€” stored securely")
        lin_l = QVBoxLayout()
        self.lin_creds_layout = QVBoxLayout()
        btns2 = QHBoxLayout()
        self.btn_add_lin = QPushButton("Add Linux/ESXi Credential")
        self.btn_add_lin.clicked.connect(self.add_linux_cred_safe)
        self.btn_save_lin = QPushButton("Save Linux/ESXi Credentials")
        self.btn_save_lin.clicked.connect(self.save_linux_creds_safe)
        self.btn_load_lin = QPushButton("Load Linux/ESXi Credentials")
        self.btn_load_lin.clicked.connect(self.load_linux_creds_safe)
        btns2.addWidget(self.btn_add_lin); btns2.addWidget(self.btn_save_lin); btns2.addWidget(self.btn_load_lin)
        lin_l.addLayout(self.lin_creds_layout); lin_l.addLayout(btns2)
        lin_box.setLayout(lin_l)
        group_layout.addWidget(lin_box)

        # ===== SNMP settings =====
        snmp_box = QGroupBox("SNMP Settings")
        snmp_v = QVBoxLayout()
        snmp_h1 = QHBoxLayout()
        snmp_h1.addWidget(QLabel("Communities (v2c, comma-separated):"))
        self.snmp_comm_entry = QLineEdit()
        self.snmp_comm_entry.setText(", ".join(self.cfg.get("snmp_v2c", []) or []))
        snmp_h1.addWidget(self.snmp_comm_entry)
        snmp_v.addLayout(snmp_h1)

        snmp_h2 = QHBoxLayout()
        snmp_h2.addWidget(QLabel("SNMP v3 User:")); self.snmp_v3_user = QLineEdit(); snmp_h2.addWidget(self.snmp_v3_user)
        snmp_h2.addWidget(QLabel("Auth Key:")); self.snmp_v3_auth = QLineEdit(); self.snmp_v3_auth.setEchoMode(QLineEdit.EchoMode.Password); snmp_h2.addWidget(self.snmp_v3_auth)
        snmp_h2.addWidget(QLabel("Priv Key:")); self.snmp_v3_priv = QLineEdit(); self.snmp_v3_priv.setEchoMode(QLineEdit.EchoMode.Password); snmp_h2.addWidget(self.snmp_v3_priv)
        snmp_v.addLayout(snmp_h2)

        snmp_h3 = QHBoxLayout()
        snmp_h3.addWidget(QLabel("Auth Proto (MD5/SHA):")); self.snmp_v3_authp = QLineEdit(); self.snmp_v3_authp.setText(self.cfg.get("snmp_v3", {}).get("auth_proto", "SHA")); snmp_h3.addWidget(self.snmp_v3_authp)
        snmp_h3.addWidget(QLabel("Priv Proto (AES128/DES):")); self.snmp_v3_privp = QLineEdit(); self.snmp_v3_privp.setText(self.cfg.get("snmp_v3", {}).get("priv_proto", "AES128")); snmp_h3.addWidget(self.snmp_v3_privp)
        snmp_v.addLayout(snmp_h3)
        snmp_box.setLayout(snmp_v)
        group_layout.addWidget(snmp_box)

        # ===== Discovery toggles =====
        disc_layout = QHBoxLayout()
        self.chk_http = QCheckBox("Use HTTP fingerprint (Smart/IoT/Printers)")
        self.chk_http.setChecked(True)
        self.chk_nmap = QCheckBox("Assist with Nmap (if installed)")
        self.chk_nmap.setChecked(True)
        disc_layout.addWidget(self.chk_http); disc_layout.addWidget(self.chk_nmap)
        group_layout.addLayout(disc_layout)

        # ===== AD Panel =====
        ad_box = QGroupBox("Active Directory")
        ad_l = QVBoxLayout()
        h1 = QHBoxLayout()
        h1.addWidget(QLabel("Server/DC:")); self.ad_server = QLineEdit(); h1.addWidget(self.ad_server)
        h1.addWidget(QLabel("Base DN:")); self.ad_base = QLineEdit(); h1.addWidget(self.ad_base)
        ad_l.addLayout(h1)
        h2 = QHBoxLayout()
        h2.addWidget(QLabel("Username:")); self.ad_user = QLineEdit(); h2.addWidget(self.ad_user)
        h2.addWidget(QLabel("Password:")); self.ad_pass = QLineEdit(); self.ad_pass.setEchoMode(QLineEdit.EchoMode.Password); h2.addWidget(self.ad_pass)
        ad_l.addLayout(h2)
        h3 = QHBoxLayout()
        self.ad_ssl = QCheckBox("Use SSL"); h3.addWidget(self.ad_ssl)
        self.btn_ad_save = QPushButton("Save AD Settings"); self.btn_ad_save.clicked.connect(self.save_ad_settings); h3.addWidget(self.btn_ad_save)
        self.btn_ad_fetch = QPushButton("Fetch from AD & Merge"); self.btn_ad_fetch.clicked.connect(self.fetch_from_ad_threaded); h3.addWidget(self.btn_ad_fetch)
        ad_l.addLayout(h3)
        ad_box.setLayout(ad_l)
        group_layout.addWidget(ad_box)

        # ===== Control / Progress / Log =====
        btn_layout = QHBoxLayout()
        self.start_button = QPushButton("Start Collection"); self.start_button.clicked.connect(self.start_collection)
        self.stop_button  = QPushButton("Stop Collection");  self.stop_button.clicked.connect(self.stop_collection); self.stop_button.setEnabled(False)
        btn_layout.addWidget(self.start_button); btn_layout.addWidget(self.stop_button)
        group_layout.addLayout(btn_layout)

        self.progress_bar = QProgressBar(); self.progress_bar.setRange(0, 100); group_layout.addWidget(self.progress_bar)
        self.log_output = QTextEdit(); self.log_output.setReadOnly(True); group_layout.addWidget(self.log_output)

        group_box.setLayout(group_layout)
        main_layout.addWidget(group_box)

        container = QWidget(); container.setLayout(main_layout); self.setCentralWidget(container)
        self.apply_styles()

        self.win_rows = []; self.lin_rows = []
        self.load_windows_creds_safe()
        self.load_linux_creds_safe()
        self.load_ad_settings_into_ui()

        if not NMAP_BIN:
            self.chk_nmap.setText("Assist with Nmap (not found)")
        if _PYSNMP_OK:
            self.log_output.append(f"SNMP backend: {_SNMP_BACKEND} is active.")
        else:
            self.log_output.append("Warning: SNMP library not available. SNMP discovery will be skipped.")

    def apply_styles(self):
        style = """
        QPushButton { background-color: #3498db; color: white; font-size: 14px; font-weight: bold; border: 2px solid #2980b9; border-radius: 8px; padding: 10px; margin: 5px; }
        QPushButton:hover { background-color: #2980b9; }
        QPushButton:pressed { background-color: #1f618d; }
        QGroupBox { border: 2px solid #3498db; border-radius: 10px; margin-top: 10px; padding: 10px; font-size: 14px; color: #2c3e50; }
        """
        self.setStyleSheet(style)

    # ---------- Windows creds ----------
    def add_windows_cred_safe(self):
        self.add_windows_cred()

    def add_windows_cred(self, username="", password=""):
        row = QHBoxLayout()
        u = QLineEdit(); u.setPlaceholderText("DOMAIN\\user or .\\localadmin"); u.setText(username)
        p = QLineEdit(); p.setEchoMode(QLineEdit.EchoMode.Password); p.setPlaceholderText("password"); p.setText(password)
        row.addWidget(QLabel("Username:")); row.addWidget(u)
        row.addWidget(QLabel("Password:")); row.addWidget(p)
        self.win_creds_layout.addLayout(row)
        self.win_rows.append((u, p))

    def save_windows_creds_safe(self):
        cfg = self.cfg; existing_ids = {c.get("secret_id") for c in cfg.get("windows_creds", [])}
        cfg["windows_creds"] = []
        for u, p in self.win_rows:
            un = u.text().strip(); pw = p.text()
            if not un: continue
            sid = new_secret_id("win", existing_ids); existing_ids.add(sid)
            set_secret(sid, pw)
            cfg["windows_creds"].append({"username": un, "secret_id": sid})
        save_config(cfg); self.cfg = cfg
        self.log_output.append("Windows credentials saved.")

    def load_windows_creds_safe(self):
        _clear_layout(self.win_creds_layout)
        self.win_rows = []
        for c in self.cfg.get("windows_creds", []):
            self.add_windows_cred(c.get("username", ""), get_secret(c.get("secret_id", "")))
        if not self.win_rows:
            self.add_windows_cred()

    # ---------- Linux/ESXi creds ----------
    def add_linux_cred_safe(self):
        self.add_linux_cred()

    def add_linux_cred(self, username="", password=""):
        row = QHBoxLayout()
        u = QLineEdit(); u.setPlaceholderText("root / ubuntu / user / root@esxi"); u.setText(username)
        p = QLineEdit(); p.setEchoMode(QLineEdit.EchoMode.Password); p.setPlaceholderText("password"); p.setText(password)
        row.addWidget(QLabel("Username:")); row.addWidget(u)
        row.addWidget(QLabel("Password:")); row.addWidget(p)
        self.lin_creds_layout.addLayout(row)
        self.lin_rows.append((u, p))

    def save_linux_creds_safe(self):
        cfg = self.cfg; existing_ids = {c.get("secret_id") for c in cfg.get("linux_creds", [])}
        cfg["linux_creds"] = []
        for u, p in self.lin_rows:
            un = u.text().strip(); pw = p.text()
            if not un: continue
            sid = new_secret_id("lin", existing_ids); existing_ids.add(sid)
            set_secret(sid, pw)
            cfg["linux_creds"].append({"username": un, "secret_id": sid})
        save_config(cfg); self.cfg = cfg
        self.log_output.append("Linux/ESXi credentials saved.")

    def load_linux_creds_safe(self):
        _clear_layout(self.lin_creds_layout)
        self.lin_rows = []
        for c in self.cfg.get("linux_creds", []):
            self.add_linux_cred(c.get("username", ""), get_secret(c.get("secret_id", "")))
        if not self.lin_rows:
            self.add_linux_cred()

    # ---------- AD settings ----------
    def save_ad_settings(self):
        self.cfg["ad"]["server"] = self.ad_server.text().strip()
        self.cfg["ad"]["base_dn"] = self.ad_base.text().strip()
        self.cfg["ad"]["username"] = self.ad_user.text().strip()
        sid = self.cfg["ad"].get("secret_id") or new_secret_id("ad", set())
        self.cfg["ad"]["secret_id"] = sid
        set_secret(sid, self.ad_pass.text())
        self.cfg["ad"]["use_ssl"] = self.ad_ssl.isChecked()
        save_config(self.cfg)
        self.log_output.append("AD settings saved.")

    def load_ad_settings_into_ui(self):
        ad = self.cfg.get("ad", {})
        self.ad_server.setText(ad.get("server", ""))
        self.ad_base.setText(ad.get("base_dn", ""))
        self.ad_user.setText(ad.get("username", ""))
        self.ad_pass.setText(get_secret(ad.get("secret_id", "")))
        self.ad_ssl.setChecked(bool(ad.get("use_ssl", False)))

    # ---------- SNMP getters ----------
    def get_snmp_v2c(self):
        txt = self.snmp_comm_entry.text().strip()
        if not txt: return []
        return [c.strip() for c in txt.split(",") if c.strip()]

    def get_snmp_v3(self):
        user = self.snmp_v3_user.text().strip()
        if not user: return {}
        return {
            "user": user,
            "auth_key": self.snmp_v3_auth.text(),
            "priv_key": self.snmp_v3_priv.text(),
            "auth_proto": self.snmp_v3_authp.text().strip() or "SHA",
            "priv_proto": self.snmp_v3_privp.text().strip() or "AES128"
        }

    # ---------- Browse / Start / Stop ----------
    def browse_file(self):
        file, _ = QFileDialog.getSaveFileName(self, "Select or Create Excel File", "", "Excel Files (*.xlsx)")
        if file:
            if not file.lower().endswith(".xlsx"):
                file += ".xlsx"
            self.excel_file_entry.setText(file)

    def build_windows_creds_for_scan(self):
        out = []
        for u, p in self.win_rows:
            un = u.text().strip(); pw = p.text()
            if un: out.append((un, pw))
        if not out:
            for c in self.cfg.get("windows_creds", []):
                out.append((c.get("username", ""), get_secret(c.get("secret_id", ""))))
        return out

    def build_linux_creds_for_scan(self):
        out = []
        for u, p in self.lin_rows:
            un = u.text().strip(); pw = p.text()
            if un: out.append((un, pw))
        if not out:
            for c in self.cfg.get("linux_creds", []):
                out.append((c.get("username", ""), get_secret(c.get("secret_id", ""))))
        return out

    def start_collection(self):
        targets_raw = self.target_entry.text().strip()
        if not targets_raw:
            QMessageBox.warning(self, "Missing Targets", "Please enter at least one IP or subnet.")
            return
        targets = [t.strip() for t in targets_raw.split(",") if t.strip()]
        win_creds = self.build_windows_creds_for_scan()
        lin_creds = self.build_linux_creds_for_scan()
        snmp_v2c = self.get_snmp_v2c()
        snmp_v3  = self.get_snmp_v3()

        excel_file = self.excel_file_entry.text().strip()
        if not excel_file:
            excel_file = os.path.join(os.path.expanduser("~"), "Desktop", "Network_Assets.xlsx")
            self.excel_file_entry.setText(excel_file)

        self.start_button.setEnabled(False); self.stop_button.setEnabled(True)
        self.log_output.append("Starting collection...")

        global NMAP_BIN
        if not self.chk_nmap.isChecked():
            NMAP_BIN = None

        self.worker = DeviceInfoCollector(
            targets=targets, win_creds=win_creds, linux_creds=lin_creds,
            snmp_v2c=snmp_v2c, snmp_v3=snmp_v3,
            excel_file=excel_file, use_http=self.chk_http.isChecked(), parent=self
        )
        self.worker.update_progress.connect(self.progress_bar.setValue)
        self.worker.log_message.connect(self.log_output.append)
        self.worker.finished_with_status.connect(self.on_finished)
        self.worker.start()

    def stop_collection(self):
        if hasattr(self, "worker") and self.worker.isRunning():
            self.worker.stop()
            self.log_output.append("Cancel requested...")

    def on_finished(self, canceled: bool):
        self.log_output.append("Finished." + (" (Canceled)" if canceled else ""))
        self.start_button.setEnabled(True); self.stop_button.setEnabled(False)

    # ---------- AD fetch/merge ----------
    def fetch_from_ad_threaded(self):
        ad = self.cfg.get("ad", {})
        server  = (self.ad_server.text().strip() or ad.get("server", ""))
        base_dn = (self.ad_base.text().strip() or ad.get("base_dn", ""))
        user    = (self.ad_user.text().strip() or ad.get("username", ""))
        pwd     = (self.ad_pass.text() or get_secret(ad.get("secret_id", "")))
        use_ssl = self.ad_ssl.isChecked()

        excel_file = self.excel_file_entry.text().strip()
        if not excel_file:
            excel_file = os.path.join(os.path.expanduser("~"), "Desktop", "Network_Assets.xlsx")
            self.excel_file_entry.setText(excel_file)

        if not (server and base_dn and user and pwd):
            QMessageBox.warning(self, "Missing AD Settings", "Please fill AD server/base DN/username/password.")
            return

        self.ad_worker = ADWorker(server, base_dn, user, pwd, use_ssl, excel_file, parent=self)
        self.ad_worker.log_message.connect(self.log_output.append)
        self.ad_worker.finished_ok.connect(lambda ok: self.log_output.append("AD thread finished."))
        self.ad_worker.start()

# =================== MAIN ===================
if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = MainWindow()
    win.show()
    sys.exit(app.exec())